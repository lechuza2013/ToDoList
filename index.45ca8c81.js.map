{"mappings":"AAAO,MAAMA,EAAQ,CACjBC,KAAM,CACJC,KAAM,CAAC,CACLC,UAAW,QACXC,WAAW,KAIjBC,UAAW,GACXC,OACE,GAAIC,aAAaC,QAAQ,eAAe,CACtCC,QAAQC,IAAI,2CACX,MAAKC,EAAYJ,aAAaC,QAAQ,eACvCI,KAAKC,SAASC,KAAKC,MAAMJ,SAGzBF,QAAQC,IAAI,oEACbE,KAAKC,SAASD,KAAKI,aAGpBA,WACC,OAAOJ,KAAKX,MAEbY,SAASI,GACPR,QAAQC,IAAI,+BAAgCO,GAC5CL,KAAKX,KAAOgB,EACV,IAAI,MAAMC,KAAMN,KAAKP,UACjBa,IAGJX,aAAaY,QAAQ,cAAeL,KAAKM,UAAUH,KAIvDI,UAAUC,GACRV,KAAKP,UAAUkB,KAAKD,IAGtBE,QAAQC,GACN,MAAMP,EAAKN,KAAKI,WAChBE,EAAGhB,KAAKqB,KAAKE,GACbb,KAAKC,SAASK,IAGhBQ,WAAWC,GACT,MAAMT,EAAKN,KAAKI,WAChBE,EAAGhB,KAAK0B,OAAOD,EAAU,GACzBf,KAAKC,SAASK,KC9ChB,MAAMW,UAAaC,YACfC,OAASnB,KAAKoB,aAAa,CAACC,KAAM,SAClCC,cACIC,QACAvB,KAAKwB,SAETC,oBACIrC,EAAMqB,WAAU,KACZT,KAAKwB,YAGbA,SACI3B,QAAQC,IAAIV,EAAMgB,YAClB,MAAMsB,EAActC,EAAMgB,WAAWd,KACrCO,QAAQC,IAAI,wBAAwB4B,GAEpC,IAAIC,EAAQC,SAASC,cAAc,SAEnCF,EAAMG,YAAc,82FCb5B1C,EAAMM","sources":["src/state.ts","components/list.ts","src/index.ts"],"sourcesContent":["export const state = {\r\n    data: {\r\n      list: [{\r\n        pendiente: \"cagar\",\r\n        completed: true\r\n      }\r\n    ],\r\n  },\r\n  listeners: [], // los callbacks\r\n  init(){ //Pone en la data lo que hay en el Storage\r\n    if (localStorage.getItem(\"local-state\")){\r\n      console.log(\"Soy el init, se encontró un local-state\");\r\n      const localData = localStorage.getItem(\"local-state\") as string;\r\n      this.setState(JSON.parse(localData));\r\n  }\r\n  else{\r\n      console.log(\"Soy el init, no se encontró un local-state, puntuación reniciada\");\r\n     this.setState(this.getState());\r\n }\r\n  },\r\n    getState() {\r\n     return this.data; //Devuelve la data \r\n    },\r\n    setState(newState) {\r\n      console.log(\"Soy el NewState del setState\", newState)\r\n      this.data = newState; //Modifica this.data (el state) e invoca los callbacks\r\n        for(const cb of this.listeners){ \r\n            cb();\r\n            // console.log(\"Callback: \", cb)\r\n        }\r\n        localStorage.setItem(\"local-state\", JSON.stringify(newState));\r\n        // console.log(\"Soy el state, he cambiado\");\r\n       // modifica this.data (el state) e invoca los callbacks\r\n    },\r\n    subscribe(callback: (any) => any) {\r\n      this.listeners.push(callback);\r\n       // recibe callbacks para ser avisados posteriormente\r\n    },\r\n    addItem(item) { \r\n      const cb = this.getState();\r\n      cb.list.push(item);\r\n      this.setState(cb);\r\n      // suma el nuevo item a la lista\r\n    },\r\n    removeItem(position){\r\n      const cb = this.getState();\r\n      cb.list.splice(position, 1);\r\n      this.setState(cb);\r\n    }\r\n  };","import { state } from \"../src/state\";\r\n    class List extends HTMLElement{\r\n        shadow = this.attachShadow({mode: \"open\"});\r\n        constructor(){\r\n            super();\r\n            this.render();\r\n        }\r\n        connectedCallback(){\r\n            state.subscribe(()=>{\r\n                this.render();\r\n            });\r\n        }\r\n        render(){\r\n            console.log(state.getState());\r\n            const updatedList = state.getState().list;\r\n            console.log(\"Soy el render de list\",updatedList);\r\n            // EL CSS DEL SHADOW\r\n            var style = document.createElement(\"style\");\r\n            //ACA ENTRA EL CSS\r\n            style.textContent = `\r\n            @import url('https://fonts.googleapis.com/css2?family=Macondo&display=swap');\r\n            .div{\r\n                padding: 30px;\r\n            }\r\n            .div__item{\r\n                margin-bottom: 15px;\r\n                display: flex;\r\n                justify-content: space-between;\r\n                padding: 15px;\r\n                background-color: #FFF599;\r\n                min-height: 10px;\r\n            }\r\n            .div__item-container{\r\n                display: flex;\r\n                justify-content: space-between;\r\n                flex-direction: column;\r\n                align-items: center;\r\n            }\r\n            .checkbox{\r\n                height: 20px;\r\n                width: 20px;\r\n            }\r\n            .button{\r\n                height: 25px;\r\n                width: 25px;\r\n                border: none;\r\n                background-color: #FFF599;\r\n                background-image: url(\"/delete.3dc2c69c.svg\");\r\n                background-repeat: no-repeat;\r\n                background-position: center;\r\n                cursor: pointer;\r\n            }\r\n            .button:hover{\r\n                transform: scale(1.1);\r\n            }\r\n            .p{\r\n                text-overflow: ellipsis;\r\n                overflow: hidden;\r\n                white-space: nowrap;\r\n\r\n                max-width: 600px;\r\n                max-height: 600px;\r\n                font-family: 'Macondo', cursive;\r\n                font-size: 18px;\r\n                font-weight: 400;\r\n                line-height: 21px;\r\n                letter-spacing: 0em;\r\n                text-align: left;\r\n            }\r\n            `;\r\n            this.shadow.innerHTML = `\r\n            <div class=\"div\">\r\n                ${updatedList.map((item)=>{ \r\n                    return `\r\n                        <div class=\"div__item\" id=\"${updatedList.indexOf(item)}\">\r\n                            <p class=\"p\"id=\"p${updatedList.indexOf(item)}\">${item.pendiente}</p>\r\n                            <div class=\"div__item-container\">\r\n                                <input class=\"checkbox\" type=\"checkbox\" id=\"checkbox${updatedList.indexOf(item)}\"/>\r\n                                <button class=\"button\" id=\"button${updatedList.indexOf(item)}\"></button>\r\n                        </div>\r\n                    </div>`;\r\n                    }).join(\" \")  \r\n            }\r\n            </div>\r\n            `;\r\n           \r\n            //Se agrega el \"Style\" a nuestro pequeño DOM\r\n            this.shadow.appendChild(style);\r\n            //Por cada objeto de la lista se realizan estas funciones..\r\n            updatedList.forEach(element => {\r\n                // -----------------CHECKBOX----------------------------------\r\n                //El nombre de la pendiente para después tacharlo \r\n                const pendientNameEl = this.shadow.getElementById(\"p\"+updatedList.indexOf(element)) as HTMLElement;\r\n                //El checkbox del elemento\r\n                const checkboxEl = this.shadow.getElementById(\"checkbox\"+updatedList.indexOf(element)) as HTMLInputElement;\r\n                //Checkea si la pendiente estuvo completado\r\n                if (element.completed == true){\r\n                    checkboxEl.checked = true;  \r\n                    pendientNameEl.style.textDecoration = \"line-through\";\r\n                }\r\n                else{\r\n                    checkboxEl.checked = false;\r\n                    pendientNameEl.style.textDecoration = \"none\";\r\n                }\r\n                checkboxEl.addEventListener(\"change\", (e)=>{\r\n                    if (checkboxEl.checked){\r\n                        element.completed = true;\r\n                        pendientNameEl.style.textDecoration = \"line-through\";\r\n                    }\r\n                    else{\r\n                        element.completed = false;\r\n                        pendientNameEl.style.textDecoration = \"none\";\r\n                    }\r\n                })\r\n                //--------------------REMOVE BUTTON-----------------------------------\r\n                //Contenedor de la pendiente\r\n                const pendient = this.shadow.getElementById(updatedList.indexOf(element)) as HTMLElement;\r\n                //Botón para eliminar la pendiente\r\n                const removePendientButton = this.shadow.getElementById(\"button\"+updatedList.indexOf(element)) as HTMLElement;\r\n                removePendientButton.addEventListener(\"click\",()=>{\r\n                    // if (confirm(\"Estas seguro?\")) { //Confirmación en caso de arrepentimiento\r\n                    // }\r\n                    //Elimina el elemento\r\n                    pendient.remove();\r\n                    //Y lo elimina del State\r\n                    state.removeItem(updatedList.indexOf(element));\r\n                    console.log(\"Soy el botón remove\", state.getState());\r\n                })\r\n            });\r\n                 \r\n        }\r\n    }\r\n    customElements.define(\"list-el\", List);\r\n","import { state } from \"./state\";\r\nimport \"../components/header\";\r\nimport \"../components/form\";\r\nimport \"../components/list\";\r\n\r\n(function (){\r\n    state.init();\r\n})();"],"names":["$0b89d474933103bc$export$ca000e230c0caa3e","data","list","pendiente","completed","listeners","init","localStorage","getItem","console","log","localData","this","setState","JSON","parse","getState","newState","cb","setItem","stringify","subscribe","callback","push","addItem","item","removeItem","position","splice","$749ba3b7a0c21ec3$var$List","HTMLElement","shadow","attachShadow","mode","constructor","super","render","connectedCallback","updatedList","style","document","createElement","textContent"],"version":3,"file":"index.45ca8c81.js.map"}